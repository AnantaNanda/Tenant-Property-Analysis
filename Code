CREATE TABLE Profiles(
	profile_id	INT	PRIMARY KEY	IDENTITY(1,1),
	first_name	VARCHAR(255),
	last_name	VARCHAR(255)	,	
	email_id	VARCHAR(255)	NOT NULL,	
	phone	VARCHAR(255)     NOT NULL,	
	city	VARCHAR(255)	,	
	created_at	DATE	NOT NULL,		
	gender	VARCHAR(255)	NOT NULL,		
	referral_code	VARCHAR(255)	,	
	marital_status	VARCHAR(255)	
)

-- truncate the table first
--TRUNCATE TABLE dbo.Profiles;
--GO


/*Data entry via copying the tables 
SET IDENTITY_INSERT Profiles OFF -- This needs for the identity column
-- Insert data by copying from other table
INSERT INTO Profiles (first_name,last_name,email_id,phone,city
,created_at,gender,referral_code,marital_status,profile_id)
SELECT first_name,last_name,email_id,phone,city
,created_at,gender,referral_code,marital_status,profile_id FROM Profiles2

DROP TABLE Profiles2 */



CREATE TABLE Houses(
	house_id	INT	PRIMARY KEY	IDENTITY(1,1),
	house_type	VARCHAR(255),	
	bhk_type	VARCHAR(255),		
	bed_count	INT	NOT NULL,
	furnishing_type	VARCHAR(255),		
	beds_vacant	INT	NOT NULL	
)

-- truncate the table first
--TRUNCATE TABLE dbo.Houses;
--GO

/*Data entry via copying the tables 
--SET IDENTITY_INSERT Houses OFF -- This needs for the identity column
---- Insert data by copying from other table
--INSERT INTO Houses (house_type,bhk_type,bed_count,furnishing_type,beds_vacant,house_id)
--SELECT house_type,bhk_type,bed_count,furnishing_type,beds_vacant,house_id FROM Houses2

--DROP TABLE Houses2*/

CREATE TABLE Tenancy_histories(
	ID	INT	NOT NULL	PRIMARY KEY IDENTITY(1,1),
	profile_id INT NOT NULL FOREIGN KEY REFERENCES Profiles(profile_id),
	house_id	INT	NOT NULL FOREIGN KEY REFERENCES Houses(house_id),
	move_in_date DATE NOT NULL,
	move_out_date DATE	,
	rent INT ,
	bed_type VARCHAR(255) ,
	move_out_reason	VARCHAR(255)		
)

--SET IDENTITY_INSERT Tenancy_histories ON -- This needs for the identity column
---- Insert data by copying from other table
--INSERT INTO Tenancy_histories (move_in_date,move_out_date,rent,bed_type,move_out_reason,house_id,
--profile_id,ID)
--SELECT move_in_date,move_out_date,rent,bed_type,move_out_reason,house_id,
--profile_id,ID FROM dbo.TenancyHistory2
--DROP TABLE TenancyHistory2
--SELECT * FROM TenancyHistory2
--SELECT * FROM Tenancy_histories

ALTER TABLE Tenancy_histories
ALTER COLUMN TRY_CONVERT (DATE,move_out_date)

/* Tried adding respective constraints 
 --TRY_CONVERT (DATE,move_out_date)
--FROM Tenancy_histories

CONVERT(DATE,move_out_date,NULL)
isnull(convert(char(10), cast(nullif(move_out_date, '') as datetime), 101),  '')
--ALTER TABLE TenancyHistory2
--ADD PRIMARY KEY (ID) 

--ALTER TABLE TenancyHistory2
--ADD CONSTRAINT fk_profile_id
--FOREIGN KEY (profile_id)
--REFERENCES Profiles(profile_id)

--ALTER TABLE TenancyHistory2
--ADD CONSTRAINT fk_house_id
--FOREIGN KEY (house_id)
--REFERENCES Houses(house_id) 

--CREATE SEQUENCE test_sequence_name START WITH 1 INCREMENT BY 1;
--ALTER TABLE TenancyHistory2 ADD CONSTRAINT constraint_name DEFAULT NEXT VALUE FOR test_sequence_name FOR ID

--DROP TABLE Tenancy_histories
*/
CREATE TABLE Addresses (
	ID	INT	PRIMARY KEY	IDENTITY(1,1),
	house_id	INT	NOT NULL FOREIGN KEY  REFERENCES Houses(house_id)	,
	name	VARCHAR(255),
	description	TEXT,	
	city	VARCHAR(255),		
	pincode	INT	
)
--SET IDENTITY_INSERT Addresses ON -- This needs for the identity column
---- Insert data by copying from other table
--INSERT INTO Addresses(name,description,city,pincode,house_id,ID)
--SELECT name,description,city,pincode,house_id,ID FROM Addresses2
--DROP TABLE Addresses2

CREATE TABLE Referrals (
	ID	INT	PRIMARY KEY	IDENTITY(1,1),
	profile_id	INT	NOT NULL	FOREIGN KEY REFERENCES Profiles(profile_id),
	referrer_bonus_amount	FLOAT	,
	referral_valid	TINYINT	,	
	valid_from	DATE ,		
	valid_till	DATE
)
--SET IDENTITY_INSERT Referrals OFF  -- This needs for the identity column
---- Insert data by copying from other table
--INSERT INTO Referrals(referrer_bonus_amount,referral_valid	valid_from	valid_till	profile_id	ID
--)
--SELECT name,description,city,pincode,house_id,ID FROM Referrals2
--DROP TABLE Referrals2


CREATE TABLE Employment_details(
ID	INT	PRIMARY KEY	IDENTITY(1,1),
profile_id	INT	NOT NULL FOREIGN KEY REFERENCES Profiles(profile_id),
latest_employer	VARCHAR(255),		
official_mail_id	VARCHAR(255),		
years_experience	INT	,
occupational_category	VARCHAR(255)	
)

--SET IDENTITY_INSERT Employment_details OFF  -- This needs for the identity column
---- Insert data by copying from other table
--INSERT INTO Employment_details(latest_employer,official_mail_id,years_experience,occupational_category,profile_id,ID)
--SELECT latest_employer,official_mail_id,years_experience,occupational_category,profile_id,ID FROM EmployeeStatus2
--DROP TABLE EmployeeStatus2


-- To check if everything runs fine and all the datasets have been entered or not
SELECT * FROM Addresses
SELECT * FROM Employment_details
SELECT * FROM Houses
SELECT * FROM Profiles
SELECT * FROM Referrals
SELECT * FROM Tenancy_histories


--QUERY 1
SELECT  top 1 profile_id , full_name ,phone
FROM (
	SELECT  P.profile_id , CONCAT(first_name,' ', last_name) as full_name ,phone , DATEDIFF(DAY , move_in_date,TRY_CONVERT (DATE,move_out_date)) as time_lived
	FROM Profiles as P
	left join
	Tenancy_histories as T
	on P.profile_id = T.profile_id
) as k

--Query 2

SELECT full_name,email_id ,phone
FROM(
	SELECT P.*,CONCAT(first_name,' ', last_name) as full_name--P.email_id,P.phone
	FROM Profiles as P
	left join 
	Tenancy_histories as T
	on P.profile_id = T.profile_id
	WHERE T.rent > 9000 and P.marital_status = 1
) as k1

/*Query 3 
Write a query to display profile id, full name, phone, email id, city, house id, move_in_date ,
move_out date, rent, total number of referrals made, latest employer and the occupational
category of all the tenants living in Bangalore or Pune in the time period of jan 2015 to jan
2016 sorted by their rent in descending order */

SELECT P.profile_id,CONCAT(first_name,' ', last_name) as full_name,phone,email_id ,city,house_id,move_in_date,move_out_date,
(SELECT COUNT(profile_id) FROM Referrals WHERE profile_id = P.profile_id GROUP BY profile_id) as no_of_referrals
FROM Profiles as P
left join 
Tenancy_histories as T
on P.profile_id = T.profile_id
left join
Employment_details as E
on T.profile_id = E.profile_id
WHERE P.city in ('Bangalore','Pune') and T.move_out_date between '2015-01-01' and '2016-01-01' 
ORDER BY T.rent	DESC



/* Query 4
Write a sql snippet to find the full_name, email_id, phone number and referral code of all
the tenants who have referred more than once.
Also find the total bonus amount they should receive given that the bonus gets calculated
only for valid referrals.
*/

--This snippet is only for identifying multiple referral tenants.
SELECT CONCAT(first_name,' ', last_name) as full_name,email_id,phone,referral_code
FROM(
SELECT *
FROM(
SELECT profile_id,COUNT(profile_id) as no_of_ref
FROM Referrals
GROUP BY profile_id ) as j2
WHERE j2.no_of_ref > 1 
) as p1
left join 
Profiles as P
on P.profile_id = p1.profile_id

/* Break down of the above code
SELECT *
FROM(
SELECT profile_id,COUNT(profile_id) as no_of_ref
FROM Referrals
GROUP BY profile_id ) as j2
WHERE j2.no_of_ref > 1 */

--To satisfy both aspects , try creating the two tables and then join them.
-- Table 1
SELECT *
INTO TEMP_1
FROM(
SELECT profile_id,SUM(referrer_bonus_amount) as bonus_amt
FROM Referrals
WHERE referral_valid = 1 
GROUP BY profile_id ) as tem1

-- Table 2
SELECT *
INTO TEMP_2
FROM(
SELECT *
FROM(
SELECT profile_id,COUNT(profile_id) as no_of_ref
FROM Referrals
GROUP BY profile_id 
) as j2
WHERE j2.no_of_ref > 1 ) as tem2

--This snippet provides the bonus amount too
SELECT CONCAT(first_name,' ', last_name) as full_name,email_id,phone,referral_code,bonus_amt
FROM(
SELECT TEMP_1.*
FROM TEMP_2
left join
TEMP_1
on TEMP_2.profile_id=TEMP_1.profile_id) as tin
left join
Profiles as P
on  tin.profile_id= P.profile_id

/*Query 5 
Write a query to find the rent generated from each city and also the total of all cities.
*/

-- First , I got the price of each city by group by and then combined it with total price by UNION function
SELECT city, SUM(rent) AS city_rent, (SELECT NULL) AS total_rent
FROM Profiles as P
left join 
Tenancy_histories as T
on T.profile_id = P.profile_id
GROUP BY city
UNION ALL
SELECT
    'Total', 
	NULL,
    SUM(rent)
FROM Profiles as P
left join 
Tenancy_histories as T
on T.profile_id = P.profile_id

/*Query 6
Create a view 'vw_tenant' find
profile_id,rent,move_in_date,house_type,beds_vacant,description and city of tenants who
shifted on/after 30th april 2015 and are living in houses having vacant beds and its address.
*/

--View creation via joining of multiple columns in diff tables.
DROP VIEW vw_tenant 
CREATE VIEW vw_tenant AS
SELECT profile_id,rent,move_in_date,house_type ,beds_vacant,description,city
FROM(
SELECT tem2.profile_id,tem2.city,rent,move_in_date ,tem2.house_id,beds_vacant,description,house_type
FROM
(SELECT tem1.profile_id,city,rent,move_in_date ,tem1.house_id,beds_vacant,house_type
FROM 
(SELECT P.profile_id,city,rent,move_in_date,house_id
FROM 
Profiles as P
left join
Tenancy_histories as T
on P.profile_id = T.profile_id) as tem1
left join
Houses as H
on H.house_id = tem1.house_id) as tem2
left join 
Addresses as A
on A.house_id=tem2.house_id
WHERE tem2.beds_vacant > 0 and tem2.move_in_date > '2015-04-30'
) as tem_3

SELECT * FROM vw_tenant

/*Query 7
Write a code to extend the valid_till date for a month of tenants who have referred more
than one time
*/
-- First, extract the table and fit it into a new one
SELECT * 
INTO Old_Date
FROM (SELECT valid_from
FROM(
SELECT *
FROM(
SELECT profile_id,COUNT(profile_id) as no_of_ref
FROM Referrals
GROUP BY profile_id ) as j2
WHERE j2.no_of_ref > 1 ) as df
left join
Referrals as R
on R.profile_id=df.no_of_ref) as raw_data


--This is the new table
SELECT *
FROM Old_Date

--Add a new column to show updated values
ALTER TABLE Old_Date
ADD Updated_valid_from DATE

--Following are the updated values
UPDATE Old_Date
SET Old_Date.Updated_valid_from = DATEADD(month,1,Old_Date.valid_from)

--Final table
SELECT *
FROM Old_Date


/*Query 8 
Write a query to get Profile ID, Full Name, Contact Number of the tenants along with a new
column 'Customer Segment' wherein if the tenant pays rent greater than 10000, tenant falls
in Grade A segment, if rent is between 7500 to 10000, tenant falls in Grade B else in Grade C
*/

--CASE - WHEN condition to be used
SELECT P.profile_id, CONCAT(first_name , ' ', last_name) as full_name , phone , CASE 
	WHEN rent > 10000 THEN 'GRADE A' 
	WHEN rent BETWEEN 7500 AND 10000 THEN 'GRADE B' 
	ELSE 'GRADE C'
END AS 'Customer Segment'
FROM Profiles as P
left join
Tenancy_histories as T
on P.profile_id=T.profile_id

/* Query 9 
Write a query to get Fullname, Contact, City and House Details of the tenants who have not
referred even once
*/


SELECT CONCAT(first_name,' ', last_name) as full_name,phone,city,H.*
FROM(
SELECT t1.*,house_id
FROM 
(SELECT P.*
FROM Profiles as P
left join
Referrals as R
on R.profile_id = P.profile_id
WHERE referrer_bonus_amount IS NULL) as t1
left join 
Tenancy_histories as T
on T.profile_id = t1.profile_id) as t2
left join
Houses as H
on H.house_id = t2.house_id


/* Query 10
Write a query to get the house details of the house having highest occupancy */

SELECT *
--INTO temp_houses
FROM Houses

ALTER TABLE temp_houses
ADD occupancy_count INT

SELECT *
FROM temp_houses

UPDATE temp_houses
SET temp_houses.occupancy_count = temp_houses.bed_count - temp_houses.beds_vacant

SELECT top 1 H.*
FROM temp_houses as t
left join
Houses as H
on H.house_id = t.house_id
ORDER BY occupancy_count DESC

